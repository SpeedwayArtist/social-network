{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostFormRedux.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","deactivateEditMode","onSubmit","createField","Input","type","Textarea","Object","keys","contacts","map","key","onClick","ProfileData","isOwner","activateEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contacts","className","css","ProfileInfo","setAvatar","saveProfile","isEditMode","setUserProfileEditMode","Preloader","avatar","src","photos","large","alt","target","files","length","initialValues","formData","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddPostFormRedux","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postElements","posts","p","id","postsContainer","values","addPost","newPostBody","postsItems","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostCreator","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"iIACAA,EAAOC,QAAU,CAAC,OAAS,4BAA4B,OAAS,4BAA4B,SAAW,gC,oBCAvGD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,WAAa,8B,oBCAhFD,EAAOC,QAAU,CAAC,KAAO,qB,wICoCVC,EAnCgB,SAACC,GAAW,IAAD,EAERC,oBAAS,GAFD,mBAEjCC,EAFiC,KAEvBC,EAFuB,OAGZF,mBAASD,EAAMI,QAHH,mBAGjCA,EAHiC,KAGzBC,EAHyB,KAKtCC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAYV,OACI,qCACMF,GACE,6BACI,uCAAe,0BAAMK,cAdZ,WACrBJ,GAAY,KAauDH,EAAMI,QAAU,eAG9EF,GACG,6BACI,2BAAOM,SAZA,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAWmBC,WAAW,EAAMC,OAhBvC,WACvBV,GAAY,GACZH,EAAMc,iBAAiBV,IAcmEO,MAAOP,O,yBCG1FW,EAFkBC,YAAU,CAACC,KAAM,gBAAjBD,EA1BT,SAAC,GAAiD,IAAhDE,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,mBAC7C,OAAO,0BAAMC,SAAUH,GACnB,6BACI,yCADJ,IACuBI,YAAY,YAAa,WAAY,GAAIC,MAEhE,6BACI,4CADJ,IAC0BD,YAAY,GAAI,iBAAkB,GAAIC,IAAO,CAACC,KAAM,cAE9E,6BACI,oDADJ,IACkCF,YAAY,yBAA0B,4BAA6B,GAAIG,MAEzG,6BACI,wCADJ,IACsBH,YAAY,WAAY,UAAW,GAAIG,MAE7D,6BACI,wCADJ,IACsBC,OAAOC,KAAKR,EAAQS,UAAUC,KAAI,SAAAC,GACpD,OAAO,yBAAKA,IAAKA,GACb,2BAAIA,EAAJ,KADG,IACYR,YAAYQ,EAAK,YAAcA,EAAK,GAAIP,UAI/D,wCACA,2BAAOC,KAAM,SAAUb,MAAO,SAAUoB,QAASX,QCkBnDY,EAAc,SAAC,GAA0C,IAAzCb,EAAwC,EAAxCA,QAASc,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,iBACpC,OAAO,6BACH,6BACI,yCADJ,IACuBf,EAAQgB,UAE/B,6BACI,4CADJ,IAC0BhB,EAAQiB,eAAiB,MAAQ,MAE1DjB,EAAQiB,gBACT,6BACI,oDADJ,IACkCjB,EAAQkB,2BAE1C,6BACI,wCADJ,IACsBlB,EAAQmB,SAE9B,6BACI,wCADJ,IACsBZ,OAAOC,KAAKR,EAAQS,UAAUC,KAAI,SAAAC,GACpD,OAAO,kBAAC,EAAD,CAAUA,IAAKA,EAAKS,aAAcT,EAAKU,aAAcrB,EAAQS,SAASE,SAGhFG,GAAW,4BAAQT,KAAM,SAAUO,QAASG,GAAjC,UAIdO,EAAW,SAAC,GAAkC,IAAjCF,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC7B,OAAO,yBAAKE,UAAWC,IAAIf,UACvB,2BAAIW,EAAJ,KADG,IACqBC,IAIjBI,EArEK,SAAC,GAA8G,IAA7GX,EAA4G,EAA5GA,QAASd,EAAmG,EAAnGA,QAASf,EAA0F,EAA1FA,OAAQU,EAAkF,EAAlFA,iBAAkB+B,EAAgE,EAAhEA,UAAWC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,uBAElG,IAAK7B,EACD,OAAO,kBAAC8B,EAAA,EAAD,MAoBX,OACI,6BACI,yBAAKP,UAAWC,IAAIO,QAChB,yBACIC,IAAKhC,EAAQiC,OAAOC,MAAQlC,EAAQiC,OAAOC,MAAQ,+EACnDC,IAAI,MAEXrB,GAAW,2BAAOT,KAAM,OAAQhB,SAjBZ,SAACC,GACtBA,EAAE8C,OAAOC,MAAMC,QACfZ,EAAUpC,EAAE8C,OAAOC,MAAM,OAgBzB,kBAAC,EAAD,CAAwBpD,OAAQA,EAAQU,iBAAkBA,IACzDiC,EACK,kBAAC,EAAD,CAAiB5B,QAASA,EAASuC,cAAevC,EAASE,SAdxD,SAACsC,GACdb,EAAYa,IAa6EvC,mBAxBlE,WACvB4B,GAAuB,MAwBb,kBAAC,EAAD,CAAa7B,QAASA,EAASc,QAASA,EAASC,iBA5BtC,WACrBc,GAAuB,Q,4CCIhBY,EAdF,SAAC5D,GACV,OACI,yBAAK0C,UAAWC,IAAIkB,MAChB,yBAAKV,IAAI,+EAA+EG,IAAI,KAC5F,6BACKtD,EAAM8D,SAEX,6BACI,sCAAY9D,EAAM+D,e,gBCN5BC,EAAcC,YAAiB,IAmBtBC,EAJUlD,YAAU,CAC/BC,KAAM,cADeD,EAbL,SAAChB,GACjB,OACI,0BAAMqB,SAAUrB,EAAMkB,cAClB,6BACI,kBAACiD,EAAA,EAAD,CAAOC,KAAM,cAAeC,UAAW5C,IAAU6C,YAAa,eAAgBC,SAAU,CAACC,IAAUR,MAEvG,6BACI,iDCaDS,EAtBCC,IAAMC,MAAK,SAAC3E,GACxB,IAAI4E,EAAe5E,EAAM6E,MAAMhD,KAAI,SAAAiD,GAAC,OAAI,kBAAC,EAAD,CAAMhD,IAAKgD,EAAEC,GAAIjB,QAASgB,EAAEhB,QAASC,WAAYe,EAAEf,gBAM3F,OACI,yBAAKrB,UAAWC,IAAIqC,gBAChB,wCAGA,6BACI,kBAAC,EAAD,CAAkB3D,SAVd,SAAC4D,GACbjF,EAAMkF,QAAQD,EAAOE,iBAWjB,yBAAKzC,UAAWC,IAAIyC,YACfR,O,QCCFS,EAFUC,aAZD,SAACC,GACrB,MAAO,CACHV,MAAOU,EAAMC,YAAYX,MACzBY,YAAaF,EAAMC,YAAYC,gBAGZ,SAACC,GACxB,MAAO,CACHR,QAAS,SAACC,GAAD,OAAiBO,EAASC,YAAeR,QAIjCG,CAA6Cb,GCLvDmB,EAVC,SAAC5F,GACb,OACI,6BACI,kBAAC,EAAD,CAAaiC,QAASjC,EAAMiC,QAASd,QAASnB,EAAMmB,QAASf,OAAQJ,EAAMI,OAC9DU,iBAAkBd,EAAMc,iBAAkB+B,UAAW7C,EAAM6C,UAAWC,YAAa9C,EAAM8C,YAAaC,WAAY/C,EAAM+C,WAAYC,uBAAwBhD,EAAMgD,yBAC/K,kBAAC,EAAD,Q,eCIN6C,E,+KAGE,IAAIC,EAASC,KAAK/F,MAAMgG,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK/F,MAAMkG,kBAEhBH,KAAK/F,MAAMmG,QAAQC,KAAK,UAGhCL,KAAK/F,MAAMqG,eAAeP,GAC1BC,KAAK/F,MAAMsG,cAAcR,K,0CAIzBC,KAAKQ,mB,yCAGUC,EAAWC,EAAWC,GACjCX,KAAK/F,MAAMgG,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QACzDC,KAAKQ,mB,+BAKT,OACI,kBAAC,EAAD,iBAAaR,KAAK/F,MAAlB,CACSiC,SAAU8D,KAAK/F,MAAMgG,MAAMC,OAAOH,OAClC3E,QAAS4E,KAAK/F,MAAMmB,QACpBf,OAAQ2F,KAAK/F,MAAMI,OACnBU,iBAAkBiF,KAAK/F,MAAMc,iBAC7B+B,UAAWkD,KAAK/F,MAAM6C,UACtBC,YAAaiD,KAAK/F,MAAM8C,YACxBC,WAAYgD,KAAK/F,MAAM+C,WACvBC,uBAAwB+C,KAAK/F,MAAMgD,8B,GAlCzB0B,IAAMiC,WA+CtBC,sBACXtB,aAToB,SAACC,GAAD,MAAY,CAChCpE,QAASoE,EAAMC,YAAYrE,QAC3B4B,WAAYwC,EAAMC,YAAYzC,WAC9B3C,OAAQmF,EAAMC,YAAYpF,OAC1B8F,gBAAiBX,EAAMsB,KAAK9B,GAC5B+B,OAAQvB,EAAMsB,KAAKC,UAIM,CAACT,mBAAgBC,kBAAexF,qBAAkB+B,cAAWC,gBAAaE,6BACnG+D,IAFWH,CAIbf","file":"static/js/3.c4782b94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"ProfileInfo_header__CDzGq\",\"avatar\":\"ProfileInfo_avatar__1-Zcq\",\"contacts\":\"ProfileInfo_contacts__4DVfm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"MyPosts_postsContainer__3iigP\",\"postsItems\":\"MyPosts_postsItems__1xJJn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2hNcP\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"Set status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport css from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, deactivateEditMode}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <b>Full name:</b> {createField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Open to work:</b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>Looking for position:</b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me:</b> {createField('About me', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key}>\r\n                <b>{key}:</b> {createField(key, 'contacts.' + key, [], Input)}\r\n            </div>\r\n        })}\r\n        </div>\r\n        <button>Save</button>\r\n        <input type={'button'} value={'Cancel'} onClick={deactivateEditMode}/>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport css from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({isOwner, profile, status, updateUserStatus, setAvatar, saveProfile, isEditMode, setUserProfileEditMode}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setUserProfileEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setUserProfileEditMode(false);\r\n    }\r\n\r\n    const onMainAvatarSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            setAvatar(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={css.avatar}>\r\n                <img\r\n                    src={profile.photos.large ? profile.photos.large : 'https://upload.wikimedia.org/wikipedia/commons/7/7e/Circle-icons-profile.svg'}\r\n                    alt=''/>\r\n            </div>\r\n            {isOwner && <input type={'file'} onChange={onMainAvatarSelected}/>}\r\n            <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n            {isEditMode\r\n                ? <ProfileDataForm profile={profile} initialValues={profile} onSubmit={onSubmit} deactivateEditMode={deactivateEditMode}/>\r\n                : <ProfileData profile={profile} isOwner={isOwner} activateEditMode={activateEditMode}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, activateEditMode}) => {\r\n    return <div>\r\n        <div>\r\n            <b>Full name:</b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Open to work:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>Looking for position:</b> {profile.lookingForAJobDescription}\r\n        </div>}\r\n        <div>\r\n            <b>About me:</b> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n        {isOwner && <button type={'button'} onClick={activateEditMode}>Edit</button>}\r\n    </div>\r\n}\r\n\r\nconst Contacts = ({contactTitle, contactValue}) => {\r\n    return <div className={css.contacts}>\r\n        <b>{contactTitle}:</b> {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport css from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={css.item}>\r\n            <img src='https://upload.wikimedia.org/wikipedia/commons/7/7e/Circle-icons-profile.svg' alt='' />\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                <span>Like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostBody'} component={Textarea} placeholder={'Post message'} validate={[required, maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({\r\n    form: 'addNewPost'\r\n})(AddPostForm);\r\n\r\nexport default AddPostFormRedux;","import React from 'react';\r\nimport css from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostFormRedux from \"./AddPostFormRedux\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let postElements = props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostBody);\r\n    }\r\n\r\n    return (\r\n        <div className={css.postsContainer}>\r\n            <h3>\r\n                My posts\r\n            </h3>\r\n            <div>\r\n                <AddPostFormRedux onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={css.postsItems}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import { addPostCreator} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nconst onSubmit = (formData) => {\r\n    console.log('submit')\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostBody) => dispatch(addPostCreator(newPostBody))\r\n    };\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport css from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateUserStatus={props.updateUserStatus} setAvatar={props.setAvatar} saveProfile={props.saveProfile} isEditMode={props.isEditMode} setUserProfileEditMode={props.setUserProfileEditMode}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    saveProfile,\r\n    setAvatar,\r\n    setUserProfileEditMode,\r\n    updateUserStatus\r\n} from '../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}\r\n                     setAvatar={this.props.setAvatar}\r\n                     saveProfile={this.props.saveProfile}\r\n                     isEditMode={this.props.isEditMode}\r\n                     setUserProfileEditMode={this.props.setUserProfileEditMode}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    isEditMode: state.profilePage.isEditMode,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, setAvatar, saveProfile, setUserProfileEditMode}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}